// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[]
  products       product[]
  order          Order[]
  createdAt      DateTime       @default(now())
  upadatedAt     DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products     product[]
  createdAt    DateTime   @default(now())
  upadatedAt   DateTime   @updatedAt
}

model product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  orderProducts  OrderProduct[]
  ingredients    String[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String
  createdAt      DateTime       @default(now())
  upadatedAt     DateTime       @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  orderProducts     OrderProduct[]
  consumptionMethod consumptionMethod
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  createdAt         DateTime          @default(now())
  upadatedAt        DateTime          @updatedAt
}

model OrderProduct {
  id         String   @id @default(uuid())
  product    product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  upadatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum consumptionMethod {
  TAKEAWAY
  DINE_IN
}
